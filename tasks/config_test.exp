#!/bin/expect

parray env
# set varibles
set config $env(PT_config)
set username $env(PT_user)
set applymode $env(PT_apply_mode)
set host $env(PT__target)
puts "i ran"
# Check if sleep timer has been set, if not default to 5 seconds
if {[info exists env(PT_sleeptime)]} {
    set sleeptime $env(PT_sleeptime)
    puts "Sleeptime set to $sleeptime"
} else {
    set sleeptime 5
    puts "Sleeptime set to $sleeptime"
}

#set timestamp for config file
set timestamp [exec date +%s]
puts "timestamp is $timestamp"

# chomp hostname
set newhost [exec echo $host | awk -F uri": {{ print $2 }} | awk -F "," {{ print $1 }} | sed s/"//g]

puts "Using configuration file $config"
puts "Running in load mode $applymode"
puts "Running on host $newhost"
puts "Sleeptime is at $sleeptime seconds"



set timeout 5
set failed false
spawn ssh -o "StrictHostKeyChecking no" $username@$newhost
expect { 
        "*>" { sleep 2 }
        timeout { puts Failed to connect to host $newhost ; exit 1 }
        }
send \r
expect "*>"
send "configure exclusive\r"
sleep 2
expect { 
    "*#" { sleep 1 }
    "*>" { puts "Could not get exclusive lock on configuration database on $newhost" ; exit 1 }
    }
expect "*#"
send "load $applymode /tmp/boltconfig-$timestamp"
expect "*#"
send "show | compare\r"
sleep $sleeptime
expect "*#"
send "$apply_command\r"
sleep $sleeptime
if [ $PT__noop == true ]
then
    expect "*#"
    send "exit configuration-mode\r"
else
    expect { 
        "*>" { sleep 1 }
        "*#" { set failed true ; send "exit configuration-mode\r" }
        }
fi
expect "*>"
send "file delete /tmp/boltconfig-$timestamp\r"
expect "*>"
if {$failed} {
    puts "Configuration apply failed on $newhost"
    exit 1
    }
send "exit"
exit 0
